name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      neo4j:
        image: neo4j:5.15-community
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_AUTH: neo4j/password
        options: >-
          --health-cmd="cypher-shell -u neo4j -p password 'RETURN 1'"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5
      postgresql:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: notes_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd="pg_isready -U postgres -d notes_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      cassandra:
        image: cassandra:4.1
        ports:
          - 9042:9042
        env:
          CASSANDRA_CLUSTER_NAME: "NotesCluster"
          CASSANDRA_DC: "datacenter1"
          CASSANDRA_RACK: "rack1"
          CASSANDRA_ENDPOINT_SNITCH: "GossipingPropertyFileSnitch"
          CASSANDRA_SEEDS: "cassandra"
          CASSANDRA_LISTEN_ADDRESS: "cassandra"
          CASSANDRA_RPC_ADDRESS: "cassandra"
          CASSANDRA_BROADCAST_ADDRESS: "cassandra"
          CASSANDRA_BROADCAST_RPC_ADDRESS: "cassandra"
          CASSANDRA_AUTHENTICATOR: "AllowAllAuthenticator"
          CASSANDRA_AUTHORIZER: "AllowAllAuthorizer"
        options: >-
          --health-cmd="cqlsh -e 'describe keyspaces'"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5
          --health-start-period=60s
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    env:
      MONGODB_URI: mongodb://localhost:27017
      MONGODB_DB: ci_test_notes_db
      NEO4J_URI: bolt://localhost:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      POSTGRESQL_HOST: localhost
      POSTGRESQL_PORT: 5432
      POSTGRESQL_DB: notes_db
      POSTGRESQL_USER: postgres
      POSTGRESQL_PASSWORD: password
      CASSANDRA_HOSTS: localhost
      CASSANDRA_PORT: 9042
      CASSANDRA_KEYSPACE: notes_keyspace
      CASSANDRA_USER: ""
      CASSANDRA_PASSWORD: ""
      USE_DB_BACKEND: sqlite
      # Add more keys as required.
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r notes-mcp-sqlite/setup/requirements.txt
          pip install pymongo neo4j requests psycopg2-binary cassandra-driver flake8 fastapi uvicorn pytest
      - name: Lint with flake8
        run: |
          flake8 notes-mcp-sqlite/db notes-mcp-sqlite/test --max-line-length=100
      - name: Unit & Integration tests (SQLite + Progress)
        run: |
          cd notes-mcp-sqlite/test
          PYTHONPATH=.. python test_db_backends.py
        env:
          USE_DB_BACKEND: sqlite
      - name: MongoDB tests
        run: |
          cd notes-mcp-sqlite/test
          PYTHONPATH=.. USE_DB_BACKEND=mongo python test_db_backends.py
        env:
          MONGODB_URI: mongodb://localhost:27017
          MONGODB_DB: ci_test_notes_db
          USE_DB_BACKEND: mongo
      - name: Neo4j tests
        run: |
          cd notes-mcp-sqlite/test
          PYTHONPATH=.. USE_DB_BACKEND=neo4j python test_db_backends.py
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: password
          USE_DB_BACKEND: neo4j
      - name: PostgreSQL tests
        run: |
          cd notes-mcp-sqlite/test
          PYTHONPATH=.. USE_DB_BACKEND=postgresql python test_db_backends.py
        env:
          POSTGRESQL_HOST: localhost
          POSTGRESQL_PORT: 5432
          POSTGRESQL_DB: notes_db
          POSTGRESQL_USER: postgres
          POSTGRESQL_PASSWORD: password
          USE_DB_BACKEND: postgresql
      - name: Cassandra tests
        run: |
          cd notes-mcp-sqlite/test
          PYTHONPATH=.. USE_DB_BACKEND=cassandra python test_db_backends.py
        env:
          CASSANDRA_HOSTS: localhost
          CASSANDRA_PORT: 9042
          CASSANDRA_KEYSPACE: notes_keyspace
          CASSANDRA_USER: ""
          CASSANDRA_PASSWORD: ""
          USE_DB_BACKEND: cassandra
      - name: Generate performance report
        run: |
          cd notes-mcp-sqlite/test
          PYTHONPATH=.. python report_perf.py
      - name: Archive perf report
        uses: actions/upload-artifact@v4
        with:
          name: db_perf_report_py${{ matrix.python-version }}
          path: notes-mcp-sqlite/test/db_perf_report.html
      - name: Build Docker images for all backends
        run: |
          docker build -t tg-notes-bot:sqlite -f dockerfiles/Dockerfile.sqlite .
          docker build -t tg-notes-bot:mongo -f dockerfiles/Dockerfile.mongo .
          docker build -t tg-notes-bot:neo4j -f dockerfiles/Dockerfile.neo4j .
          docker build -t tg-notes-bot:postgresql -f dockerfiles/Dockerfile.postgresql .
          docker build -t tg-notes-bot:cassandra -f dockerfiles/Dockerfile.cassandra .
          docker build -t tg-notes-bot:progress -f dockerfiles/Dockerfile.progress .
      - name: FastAPI Monitor smoke test
        run: |
          pip install httpx
          cd notes-mcp-sqlite
          PYTHONPATH=. nohup uvicorn db.monitor_db:app --port 8001 &
          sleep 10
          python3 -c "import httpx; assert httpx.get('http://localhost:8001/health').status_code == 200"
