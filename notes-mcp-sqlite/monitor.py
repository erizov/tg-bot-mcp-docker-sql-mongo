#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
"""

import os
import sys
import json
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
from collections import defaultdict, Counter
import re


class BotMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    
    def __init__(self, db_path: str = "notes.db", logs_dir: str = "logs"):
        self.db_path = db_path
        self.logs_dir = Path(logs_dir)
        self.logs_dir.mkdir(exist_ok=True)
    
    def get_database_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        stats = {}
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM notes")
        stats['total_notes'] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM notes WHERE due_at IS NOT NULL")
        stats['notes_with_reminders'] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM notes WHERE due_at IS NULL")
        stats['notes_without_reminders'] = cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        cursor.execute("""
            SELECT DATE(created_at) as date, COUNT(*) as count
            FROM notes
            WHERE created_at >= date('now', '-30 days')
            GROUP BY DATE(created_at)
            ORDER BY date DESC
        """)
        stats['daily_stats'] = dict(cursor.fetchall())
        
        # –¢–æ–ø –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        cursor.execute("""
            SELECT title, COUNT(*) as count
            FROM notes
            GROUP BY title
            ORDER BY count DESC
            LIMIT 10
        """)
        stats['top_titles'] = dict(cursor.fetchall())
        
        conn.close()
        return stats
    
    def analyze_logs(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –±–æ—Ç–∞."""
        log_files = list(self.logs_dir.glob("bot_*.log"))
        
        if not log_files:
            return {
                "error": "No log files found",
                "message": "–ë–æ—Ç –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è –∏–ª–∏ –ª–æ–≥–∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å",
                "suggestion": "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π 'python bot.py' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–æ–≤"
            }
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ñ–∞–π–ª
        latest_log = max(log_files, key=os.path.getmtime)
        
        analysis = {
            "log_file": str(latest_log),
            "file_size": os.path.getsize(latest_log),
            "last_modified": datetime.fromtimestamp(os.path.getmtime(latest_log)),
            "total_lines": 0,
            "user_actions": defaultdict(int),
            "errors": [],
            "daily_activity": defaultdict(int),
            "unique_users": set()
        }
        
        with open(latest_log, 'r', encoding='utf-8') as f:
            for line in f:
                analysis["total_lines"] += 1
                
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤
                if "User action:" in line:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    match = re.search(r'user_id=(\d+), username=@(\w+), action=(\w+)', line)
                    if match:
                        user_id, username, action = match.groups()
                        analysis["user_actions"][action] += 1
                        analysis["unique_users"].add(f"{username}({user_id})")
                
                if "ERROR" in line:
                    analysis["errors"].append(line.strip())
                
                # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
                date_match = re.search(r'(\d{4}-\d{2}-\d{2})', line)
                if date_match:
                    date = date_match.group(1)
                    analysis["daily_activity"][date] += 1
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º set –≤ list –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        analysis["unique_users"] = list(analysis["unique_users"])
        analysis["unique_users_count"] = len(analysis["unique_users"])
        
        return analysis
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞."""
        db_stats = self.get_database_stats()
        log_analysis = self.analyze_logs()
        
        report = []
        report.append("=" * 60)
        report.append("–û–¢–ß–ï–¢ –û –†–ê–ë–û–¢–ï –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê –ó–ê–ú–ï–¢–û–ö")
        report.append("=" * 60)
        report.append(f"–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        report.append("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        report.append(f"  üìù –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {db_stats['total_notes']}")
        report.append(f"  ‚è∞ –° –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {db_stats['notes_with_reminders']}")
        report.append(f"  üìÑ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {db_stats['notes_without_reminders']}")
        report.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        if db_stats['daily_stats']:
            report.append("üìÖ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –î–ù–Ø–ú (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):")
            for date, count in list(db_stats['daily_stats'].items())[:7]:
                report.append(f"  {date}: {count} –∑–∞–º–µ—Ç–æ–∫")
            report.append("")
        
        # –¢–æ–ø –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if db_stats['top_titles']:
            report.append("üèÜ –¢–û–ü –ó–ê–ì–û–õ–û–í–ö–û–í:")
            for title, count in list(db_stats['top_titles'].items())[:5]:
                report.append(f"  '{title}': {count} —Ä–∞–∑")
            report.append("")
        
        # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
        if "error" in log_analysis:
            report.append("üìã –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í:")
            report.append(f"  ‚ö†Ô∏è  {log_analysis['message']}")
            report.append(f"  üí° {log_analysis['suggestion']}")
            report.append("")
        else:
            report.append("üìã –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í:")
            report.append(f"  üìÅ –§–∞–π–ª –ª–æ–≥–∞: {log_analysis['log_file']}")
            report.append(f"  üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {log_analysis['file_size']} –±–∞–π—Ç")
            report.append(f"  üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {log_analysis['total_lines']}")
            report.append(f"  üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {log_analysis['unique_users_count']}")
            report.append("")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
            if log_analysis['user_actions']:
                report.append("üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ô–°–¢–í–ò–ô:")
                for action, count in log_analysis['user_actions'].items():
                    report.append(f"  {action}: {count} —Ä–∞–∑")
                report.append("")
            
            # –û—à–∏–±–∫–∏
            if log_analysis['errors']:
                report.append("‚ùå –û–®–ò–ë–ö–ò:")
                for error in log_analysis['errors'][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
                    report.append(f"  {error}")
                report.append("")
        
        report.append("=" * 60)
        
        return "\n".join(report)
    
    def save_report(self, filename: str = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª."""
        if filename is None:
            filename = f"bot_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        report = self.generate_report()
        
        report_path = self.logs_dir / filename
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        return str(report_path)
    
    def get_health_status(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
        status = {
            "timestamp": datetime.now().isoformat(),
            "database": "healthy",
            "logs": "healthy",
            "issues": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM notes")
            conn.close()
        except Exception as e:
            status["database"] = "error"
            status["issues"].append(f"Database error: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
        log_files = list(self.logs_dir.glob("bot_*.log"))
        if not log_files:
            status["logs"] = "warning"
            status["issues"].append("No log files found")
        
        return status


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
    if sys.platform == "win32":
        import codecs
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    
    monitor = BotMonitor()
    
    print("–ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞...")
    print()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    report = monitor.generate_report()
    print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_path = monitor.save_report()
    print(f"\n–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    health = monitor.get_health_status()
    print(f"\n–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {health['database']} (DB), {health['logs']} (Logs)")
    
    if health['issues']:
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in health['issues']:
            print(f"  - {issue}")


if __name__ == "__main__":
    main()
