#!/usr/bin/env python3
"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLite.
"""

import os
import sqlite3
import logging
import json
from datetime import datetime, timedelta
from typing import Optional, List, Tuple
from pathlib import Path

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging() -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)

    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger("notes_bot")
    logger.setLevel(logging.INFO)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler(
        log_dir / f"bot_{datetime.now().strftime('%Y%m%d')}.log",
        encoding='utf-8'
    )
    file_handler.setLevel(logging.INFO)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)

    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    return logger


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN: str = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
DB_PATH: str = "notes.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


class NotesDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫."""

    def __init__(self, db_path: str):
        self.db_path = db_path
        self._init_db()

    def _init_db(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS notes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                content TEXT NOT NULL,
                due_at DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)

        conn.commit()
        conn.close()
        logger.info("Database initialized successfully")

    def add_note(self, title: str, content: str, due_at: Optional[str] = None) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO notes (title, content, due_at)
            VALUES (?, ?, ?)
        """, (title, content, due_at))

        note_id = cursor.lastrowid
        conn.commit()
        conn.close()

        logger.info(f"Note added: ID={note_id}, Title='{title}', Due={due_at}")
        return note_id

    def delete_note(self, note_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ ID."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–º–µ—Ç–∫–∞
        cursor.execute("SELECT id FROM notes WHERE id = ?", (note_id,))
        if not cursor.fetchone():
            conn.close()
            logger.warning(f"Attempt to delete non-existent note: ID={note_id}")
            return False

        cursor.execute("DELETE FROM notes WHERE id = ?", (note_id,))
        deleted_count = cursor.rowcount
        conn.commit()
        conn.close()

        if deleted_count > 0:
            logger.info(f"Note deleted: ID={note_id}")
            return True
        return False

    def search_notes(self, query: str, limit: int = 10) -> List[Tuple]:
        """–ò—â–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        search_pattern = f"%{query}%"
        cursor.execute("""
            SELECT id, title, content, due_at, created_at
            FROM notes
            WHERE title LIKE ? OR content LIKE ?
            ORDER BY created_at DESC
            LIMIT ?
        """, (search_pattern, search_pattern, limit))

        results = cursor.fetchall()
        conn.close()

        logger.info(f"Search performed: query='{query}', results={len(results)}")
        return results

    def get_note_by_id(self, note_id: int) -> Optional[Tuple]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ ID."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("""
            SELECT id, title, content, due_at, created_at
            FROM notes
            WHERE id = ?
        """, (note_id,))

        result = cursor.fetchone()
        conn.close()

        return result

    def get_recent_notes(self, limit: int = 5) -> List[Tuple]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("""
            SELECT id, title, content, due_at, created_at
            FROM notes
            ORDER BY created_at DESC
            LIMIT ?
        """, (limit,))

        notes = cursor.fetchall()
        conn.close()

        return notes

    def get_upcoming_reminders(self, hours: int = 24) -> List[Tuple]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        now = datetime.now()
        future_time = now + timedelta(hours=hours)

        cursor.execute("""
            SELECT id, title, content, due_at, created_at
            FROM notes
            WHERE due_at IS NOT NULL
            AND due_at BETWEEN ? AND ?
            ORDER BY due_at ASC
        """, (now.strftime("%Y-%m-%d %H:%M:%S"), 
              future_time.strftime("%Y-%m-%d %H:%M:%S")))

        reminders = cursor.fetchall()
        conn.close()

        return reminders

    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–º–µ—Ç–∫–∞–º."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫
        cursor.execute("SELECT COUNT(*) FROM notes")
        total_notes = cursor.fetchone()[0]

        # –ó–∞–º–µ—Ç–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        cursor.execute("SELECT COUNT(*) FROM notes WHERE due_at IS NOT NULL")
        notes_with_reminders = cursor.fetchone()[0]

        # –ó–∞–º–µ—Ç–∫–∏ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        cursor.execute("SELECT COUNT(*) FROM notes WHERE due_at IS NULL")
        notes_without_reminders = cursor.fetchone()[0]

        # –ó–∞–º–µ—Ç–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("SELECT COUNT(*) FROM notes WHERE created_at >= ?", (week_ago,))
        recent_notes = cursor.fetchone()[0]

        conn.close()

        return {
            "total_notes": total_notes,
            "notes_with_reminders": notes_with_reminders,
            "notes_without_reminders": notes_without_reminders,
            "recent_notes": recent_notes
        }


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = NotesDatabase(DB_PATH)


def log_user_action(user_id: int, username: str, action: str, details: str = "") -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info(f"User action: user_id={user_id}, username=@{username}, action={action}, details={details}")


@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    log_user_action(message.from_user.id, message.from_user.username or "unknown", "start")

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add <—Ç–µ–∫—Å—Ç> - —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/remind <YYYY-MM-DD HH:MM> <—Ç–µ–∫—Å—Ç> - –∑–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–º–µ—Ç–æ–∫\n"
        "/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É\n"
        "/delete <ID> - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    log_user_action(message.from_user.id, message.from_user.username or "unknown", "help")
    await cmd_start(message)


@dp.message(Command("stats"))
async def cmd_stats(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats."""
    log_user_action(message.from_user.id, message.from_user.username or "unknown", "stats")

    stats = db.get_stats()

    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫:\n\n"
        f"üìù –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {stats['total_notes']}\n"
        f"‚è∞ –° –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {stats['notes_with_reminders']}\n"
        f"üìÑ –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['notes_without_reminders']}\n"
        f"üÜï –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {stats['recent_notes']}"
    )


@dp.message(Command("add"))
async def cmd_add(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add."""
    text = message.text[5:].strip()  # –£–±–∏—Ä–∞–µ–º "/add "

    if not text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏>")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    parts = text.split(" ", 1)
    if len(parts) == 1:
        title = "–ó–∞–º–µ—Ç–∫–∞"
        content = parts[0]
    else:
        title = parts[0]
        content = parts[1]

    note_id = db.add_note(title, content)

    log_user_action(
        message.from_user.id, 
        message.from_user.username or "unknown", 
        "add_note", 
        f"ID={note_id}, Title='{title}'"
    )

    await message.answer(
        f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"ID: {note_id}\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
        f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content}"
    )


@dp.message(Command("remind"))
async def cmd_remind(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remind."""
    text = message.text[8:].strip()  # –£–±–∏—Ä–∞–µ–º "/remind "

    if not text:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind <YYYY-MM-DD HH:MM> <—Ç–µ–∫—Å—Ç>"
        )
        return

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    parts = text.split(" ", 2)
    if len(parts) < 3:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind <YYYY-MM-DD HH:MM> <—Ç–µ–∫—Å—Ç>"
        )
        return

    try:
        due_at_str = f"{parts[0]} {parts[1]}"
        due_at = datetime.strptime(due_at_str, "%Y-%m-%d %H:%M")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if due_at <= datetime.now():
            await message.answer("–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return

        content = parts[2]

        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content_parts = content.split(" ", 1)
        if len(content_parts) == 1:
            title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
            note_content = content_parts[0]
        else:
            title = content_parts[0]
            note_content = content_parts[1]

        note_id = db.add_note(title, note_content, due_at_str)

        log_user_action(
            message.from_user.id, 
            message.from_user.username or "unknown", 
            "add_reminder", 
            f"ID={note_id}, Title='{title}', Due={due_at_str}"
        )

        await message.answer(
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"ID: {note_id}\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {note_content}\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {due_at_str}"
        )

    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM"
        )


@dp.message(Command("search"))
async def cmd_search(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search."""
    query = message.text[8:].strip()  # –£–±–∏—Ä–∞–µ–º "/search "

    if not query:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>")
        return

    log_user_action(
        message.from_user.id, 
        message.from_user.username or "unknown", 
        "search", 
        f"query='{query}'"
    )

    results = db.search_notes(query, 10)

    if not results:
        await message.answer(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"

    for note in results:
        note_id, title, content, due_at, created_at = note

        response += f"ID: {note_id}\n"
        response += f"üìå {title}\n"
        response += f"üìÑ {content}\n"

        if due_at:
            response += f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {due_at}\n"

        response += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
        response += "‚îÄ" * 20 + "\n"

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(response) > 4000:
        response = response[:4000] + "\n... (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–µ–∑–∞–Ω—ã)"

    await message.answer(response)


@dp.message(Command("delete"))
async def cmd_delete(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete."""
    text = message.text[8:].strip()  # –£–±–∏—Ä–∞–µ–º "/delete "

    if not text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <ID –∑–∞–º–µ—Ç–∫–∏>")
        return

    try:
        note_id = int(text)
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ—Ç–∫–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    note = db.get_note_by_id(note_id)
    if not note:
        await message.answer(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ —Å ID {note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
    success = db.delete_note(note_id)

    if success:
        log_user_action(
            message.from_user.id, 
            message.from_user.username or "unknown", 
            "delete_note", 
            f"ID={note_id}, Title='{note[1]}'"
        )

        await message.answer(
            f"üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!\n\n"
            f"ID: {note_id}\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {note[1]}\n"
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {note[2]}"
        )
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ —Å ID {note_id}.")


@dp.message(Command("list"))
async def cmd_list(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list."""
    log_user_action(message.from_user.id, message.from_user.username or "unknown", "list")

    notes = db.get_recent_notes(5)

    if not notes:
        await message.answer("–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–º–µ—Ç–æ–∫:\n\n"

    for note in notes:
        note_id, title, content, due_at, created_at = note

        response += f"ID: {note_id}\n"
        response += f"üìå {title}\n"
        response += f"üìÑ {content}\n"

        if due_at:
            response += f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {due_at}\n"

        response += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at}\n"
        response += "‚îÄ" * 20 + "\n"

    await message.answer(response)


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("Starting bot...")

    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("Please set BOT_TOKEN environment variable!")
        return

    logger.info("Bot started successfully")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
