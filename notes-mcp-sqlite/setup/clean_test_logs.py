#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤.
"""

import os
import sys
from pathlib import Path


def setup_encoding():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows."""
    if sys.platform == "win32":
        import codecs
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())


def clean_test_logs():
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã."""
    logs_dir = Path("logs")
    
    if not logs_dir.exists():
        print("üìÅ –ü–∞–ø–∫–∞ logs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
    log_files = list(logs_dir.glob("bot_*.log"))
    report_files = list(logs_dir.glob("bot_report_*.txt"))
    
    deleted_count = 0
    
    # –£–¥–∞–ª—è–µ–º –ª–æ–≥-—Ñ–∞–π–ª—ã
    for log_file in log_files:
        try:
            log_file.unlink()
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {log_file.name}")
            deleted_count += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {log_file.name}: {e}")
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç—ã
    for report_file in report_files:
        try:
            report_file.unlink()
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {report_file.name}")
            deleted_count += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {report_file.name}: {e}")
    
    print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã
    remaining_files = list(logs_dir.glob("*"))
    if remaining_files:
        print(f"üìÅ –û—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–π–ª–æ–≤ –≤ logs/: {len(remaining_files)}")
        for file in remaining_files:
            print(f"  - {file.name}")
    else:
        print("üìÅ –ü–∞–ø–∫–∞ logs –ø—É—Å—Ç–∞")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    setup_encoding()
    
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤...")
    print()
    
    try:
        clean_test_logs()
        print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


if __name__ == "__main__":
    main()
