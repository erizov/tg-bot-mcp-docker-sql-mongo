#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.
"""

import sqlite3
import sys
from datetime import datetime, timedelta


def setup_encoding():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows."""
    if sys.platform == "win32":
        import codecs
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())


def test_database_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print()
    
    conn = sqlite3.connect('notes.db')
    cursor = conn.cursor()
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    print("1. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫:")
    cursor.execute("""
        SELECT id, title, content FROM notes 
        WHERE title LIKE '%–≤–∞–∂–Ω–æ%' OR content LIKE '%–≤–∞–∂–Ω–æ%'
        LIMIT 3
    """)
    search_results = cursor.fetchall()
    print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ —Å '–≤–∞–∂–Ω–æ': {len(search_results)}")
    for note in search_results:
        print(f"   - ID: {note[0]}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: {note[1]}")
    print()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
    print("2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID:")
    cursor.execute("SELECT id, title, content FROM notes LIMIT 1")
    test_note = cursor.fetchone()
    if test_note:
        note_id = test_note[0]
        cursor.execute("SELECT id, title, content FROM notes WHERE id = ?", (note_id,))
        found_note = cursor.fetchone()
        print(f"   –ó–∞–º–µ—Ç–∫–∞ ID {note_id}: {found_note[1] if found_note else '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    print()
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("3. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    cursor.execute("SELECT COUNT(*) FROM notes")
    total = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM notes WHERE due_at IS NOT NULL")
    with_reminders = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM notes WHERE due_at IS NULL")
    without_reminders = cursor.fetchone()[0]
    
    week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("SELECT COUNT(*) FROM notes WHERE created_at >= ?", (week_ago,))
    recent = cursor.fetchone()[0]
    
    print(f"   –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {total}")
    print(f"   –° –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {with_reminders}")
    print(f"   –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {without_reminders}")
    print(f"   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {recent}")
    print()
    
    conn.close()
    print("‚úÖ –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


def test_search_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")
    print()
    
    conn = sqlite3.connect('notes.db')
    cursor = conn.cursor()
    
    test_queries = [
        "–≤–∞–∂–Ω–æ",
        "–≤—Å—Ç—Ä–µ—á–∞",
        "–∫—É–ø–∏—Ç—å",
        "–ø—Ä–æ–µ–∫—Ç",
        "–≤—Ä–∞—á"
    ]
    
    for query in test_queries:
        cursor.execute("""
            SELECT COUNT(*) FROM notes 
            WHERE title LIKE ? OR content LIKE ?
        """, (f"%{query}%", f"%{query}%"))
        
        count = cursor.fetchone()[0]
        print(f"   –ü–æ–∏—Å–∫ '{query}': –Ω–∞–π–¥–µ–Ω–æ {count} –∑–∞–º–µ—Ç–æ–∫")
    
    conn.close()
    print("\n‚úÖ –¢–µ—Å—Ç—ã –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


def test_delete_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è (–±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)."""
    print("\nüóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è...")
    print()
    
    conn = sqlite3.connect('notes.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    cursor.execute("SELECT id, title FROM notes LIMIT 5")
    notes = cursor.fetchall()
    
    print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è:")
    for note_id, title in notes:
        print(f"   - ID: {note_id}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    if notes:
        test_id = notes[0][0]
        cursor.execute("SELECT id FROM notes WHERE id = ?", (test_id,))
        exists = cursor.fetchone() is not None
        print(f"\n   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ ID {test_id}: {'‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    
    conn.close()
    print("\n‚úÖ –¢–µ—Å—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    setup_encoding()
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê")
    print("=" * 50)
    
    try:
        test_database_functions()
        test_search_functionality()
        test_delete_simulation()
        
        print("\n" + "=" * 50)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /search - –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")
        print("  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /delete - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫")
        print("  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("  ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("  ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")


if __name__ == "__main__":
    main()
